import moment from "moment";
import notify from "devextreme/ui/notify";
import Map from "../components/Map";
import RouteController from "../components/RouteController";
import EditGrid from "../components/EditGrid";

import { getCustomCoorinates, setCustomCoorinates } from "../../js/tools/map";
import api from "../../api";

class DispDetailForm {
  constructor(form, Vue, popups) {
    this.form = form;
    this.formName = form.name;
    this.$Vue = Vue;
    this.metaData = form.metaData;
    this.popups = popups;
    this.formName = this.form.name;
    this.backendForms = this.$Vue.store.getters[this.getStoreName("backendForms")][this.formName];
    this.lastNameBtnMarker = "";
    this.redux = this.$Vue.$redux.storeRedux;
    this.footer = this.form.getComponentByName("EPCSFooter").component;
    this.activeShipId = null;

    this.map = new Map(form, Vue);

    Vue.$bus.$on("saveDisp", () => this.saveDisp());
    //–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–≤–æ–¥–∏—Ç—å popup –∏–ª–∏ –Ω–µ—Ç
    Vue.$bus.$on("checkSave", () => this.checkSave());
    Vue.$bus.$on(["getAsyncShip", "getAsyncImo", "getAsyncCargoTypes", "getAsyncPortplace"], (data) =>
      this._getSelectData(data)
    );
    Vue.$bus.$on("fillShip", (data) => this._getShip(data));
    Vue.$bus.$on(["shipCoords", "placeNsr", "exit", "enter", "departure", "destination"], (e) =>
      this.map.fillCoords(e)
    );

    if (this.metaData.disabled) this._setDisabled();
    if (this.form.getComponentByName("route")) this._createRoute();

    this._getDisp();
    this._createEditGrids();
  }

  _getSelectData(data) {
    let asyncName = this.getStoreName(`async${data.asyncSetting.asyncName}`);
    //—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º action (–ø—Ä–∏–º–µ—Ä iceClass -> getIceClass)
    this.$Vue.store.dispatch(asyncName).then(() => {
      //–ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥–µ—Ç—Ç–µ—Ä–∞
      let asyncData = this.$Vue.store.getters[asyncName];
      this.$Vue.$bus.$emit(`putAsync${data.asyncSetting.asyncName}`, asyncData);
    });
  }

  _getShip(data) {
    //–¥–æ–±–∞–≤–ª—è–µ–º –∏–º–æ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è
    let isShip = data.asyncSetting.displayExpr !== "imo",
      ships = this.$Vue.store.getters[this.getStoreName("allShips")],
      cardShip = ships.filter((el) => el.id === data.value)[0],
      shipInput = this.form.getComponentByName("name").component,
      imoInput = this.form.getComponentByName("imo").component;

    isShip ? imoInput.setValue(cardShip.imo) : shipInput.setValue(cardShip.name);
  }

  _getDisp() {
    const { id, nameForm } = this.metaData;
    if (id && nameForm) {
      this.$Vue.store.dispatch(this.getStoreName("getDisp"), this.metaData).then((disp) => {
        this.fillForm(disp);
        //–°–æ—Ö—Ä–∞–Ω—è–µ–º shipId –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –Ω–µ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è –∫–æ—Ä–∞–±–ª—å
        this.activeShipId = disp.shipId;
      });
    }
  }

  _createRoute() {
    this.routeController = new RouteController(
      {
        component: this.form.getComponentByName("route"),
        componentMap: this.form.getComponentByName("routeMap"),
        buttonActivateMap: this.form.getComponentByName("activateRouteMapButton"),
        buttonClear: this.form.getComponentByName("clearRouteButton"),
      },
      Vue
    );
  }

  _createEditGrids() {
    if (this.formName === "ExitSeePort") {
      this.editGridCargo = this.form.getComponentByName("cargoTypes").component;
      this.editGridLogic = new EditGrid(this.editGridCargo, this.form, this.$Vue);
      this.editGridHazard = this.form.getComponentByName("hazardClasses").component;
      this.editGridLogic = new EditGrid(this.editGridHazard, this.form, this.$Vue);
    }
  }

  fillForm(disp) {
    if (disp) {
      this.form.components.forEach((component) => {
        const name = component.componentName,
          lowerName = name.toLowerCase(),
          element = this.form.getComponentByName(name).component;
        if (name.substr(0, 4) === "EPCS") return;
        if (disp[name]) element.setValue(disp[name]);
        if (name === "name") return element.setValue(disp.ship.name);
        if (name === "imo") return element.setValue(disp.ship.imo);
        if (lowerName.includes("lat") || lowerName.includes("lon")) {
          let elem = this.form.getComponentByName(name).component;
          let route = this.form.getComponentByName(`EPCS${name}`).component;
          let parent = this.form.getComponentByParentId(elem.parentId);
          setCustomCoorinates(elem, route);
          this.map.changeCoords(parent.components);
        }
        // if (lowerName.includes("date")) {
        //   let date = moment(disp[name]).format("DD.MM.YYYY hh:mm:ss");
        //   element.setValue(date);
        // }
      });
    }
  }

  _setDisabled() {
    this.form.components.forEach((component) => {
      const name = component.componentName;
      this.form.getComponentByName(name).component.setDisabled(true);
    });

    this.footer.getProps().rightLabel = "";
    this.footer.getProps().middleLabel = "";
  }

  saveDisp() {
    //–ó–∞–±–∏—Ä–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏—à–ª–∞ —Å –±—ç–∫–∞ (–º—ã –µ–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤ —Å—Ç–æ—Ä)
    // –ó–∞–±–∏—Ä–∞–µ–º –≤—Å–µ value –∏ —Å  –ø–æ–º–æ—â—å—é id –∫–ª–æ–Ω–∏—Ä—É–µ–º –æ–±—å–µ–∫—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    const { id, nameForm, nameEvent } = this.metaData;
    const formForSave = { ...this.$Vue.store.getters[this.getStoreName("filledForms")][id] };
    let formData = {};

    //–¥–µ–ª–∞–µ–º –∏–∑ backendForms –æ–±—å–µ–∫—Ç
    this.backendForms.forEach((el) => (formData[el] = ""));
    this.form.components.forEach((component, idx) => {
      let name = component.componentName,
        lowerName = name.toLowerCase(),
        value;

      if (name.substr(0, 4) === "EPCS" && name !== "EPCSDataGrid") return;
      console.log(
        "üöÄ ~ file: DispDetailForm.js ~ line 129 ~ DispDetailForm ~ this.form.components.forEach ~ name",
        name
      );

      try {
        value = this.form.getComponentByName(name).component.getValue();
      } catch (e) {
        throw new Error(`not value from ${name}`);
      }

      if (name in formData) formData[name] = value;
      if (name === "name") formData.shipId = typeof value === "string" ? this.activeShipId : value;
      if (name === "icing") formData.icing = value = value !== "–ù–ï–¢";
      if (name === "ctFk")
        console.log(
          "üöÄ ~ file: DispDetailForm.js ~ line 181 ~ DispDetailForm ~ this.form.components.forEach ~ value",
          value
        );
      if (lowerName.includes("date")) formData[name] = moment(value).toJSON();
      if (lowerName.includes("lat") || lowerName.includes("lon")) formData[name] = this.getCoord(component);

      formData.createDate = moment().toJSON();
      if (id) formData.id = id;
    });

    // let arr = Object.keys(formData).filter((el) => !this.backendForms.includes(el) && el !== "id");

    // –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    let isEmptyFormData = !!Object.values(formData).filter((el) => el === "" || el === undefined || el === null).length;
    // –ï—Å–ª–∏ –Ω–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Ç–æ –≤—ã–¥–∞–µ–º –æ—à–∏–±–∫—É, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    if (isEmptyFormData) {
      notify({ message: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è", width: 400, shading: true }, "error", 2500);
    } else {
      let payload = {
        nameEvent,
        nameForm,
        id,
        formData,
      };
      console.log("üöÄ ~ file: DispDetailForm.js ~ line 165 ~ DispDetailForm ~ saveDisp ~ formData", formData);
      this.$Vue.store.dispatch(this.getStoreName("saveDisp"), payload).then(() => {
        this.$Vue.$bus.$emit("goToMainPage");
      });
    }
  }

  getCoord(component) {
    let parentComponents = this.form.getComponentByParentId(component.parentId).components,
      coords = getCustomCoorinates(parentComponents);
    if (component.componentName.toLowerCase().includes("lat")) return coords[0];
    if (component.componentName.toLowerCase().includes("lon")) return coords[1];
  }

  setImoOrShip(data) {
    if (data.value.id) {
      if (data.searchMode === "name") {
        this.form.getComponentByName("imo").component.setSearchValue(data.value.imo);
        // this.form.getComponentByName("nameShip").component.setSearchValue(data.value.name);
      }
      if (data.searchMode === "imo") {
        this.form.getComponentByName("nameShip").component.setSearchValue(data.value.name);
        // this.form.getComponentByName("Imo").component.setSearchValue(data.value.imo);
      }
    }
  }

  checkSave() {
    console.log(this.metaData);
    //–ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –Ω–∞–º –Ω–µ –Ω–∞–¥–æ –≤—ã–∑—ã–≤–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç.–∫. –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç
    let isDisabled = this.metaData.disabled;
    this.$Vue.$bus.$emit(isDisabled ? "goToMainPage" : "changeDataPopup");
  }

  getStoreName(name) {
    return `dispStore/${name}`;
  }
}

export default DispDetailForm;
